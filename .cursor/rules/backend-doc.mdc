---
description: 
globs: 
alwaysApply: true
---
# Django Admin API

A modern Django admin interface with auto-generated REST API for any Django project.

Created by: **asbilim**

- **Twitter:** [@iampaullilian](https://twitter.com/iampaullilian)
- **GitHub:** [asbilim](https://github.com/asbilim)
- **Portfolio:** [paullilian.dev](https://paullilian.dev)

## Features

- **Auto-generated API:** Automatically creates REST API endpoints for all models registered in the Django admin.
- **Dashboard Analytics:** A new `/api/admin/dashboard-stats/` endpoint provides a comprehensive overview of site activity, including user signups, content creation statistics, and recent activities.
- **Pre-built Blog App:** Includes a full-featured, RESTful blog API with posts, categories, tags, comments, and more.
- **Dynamic Configuration:** Manage site settings like email and file storage directly through the API.
- **Enhanced Site Identity:** More detailed site identity management, including author information, contact details, and social media links.
- **Admin User Preferences:** Users can have their own admin UI preferences, such as theme and layout density.
- **API Request Logging:** Automatically logs API requests for analytics and monitoring.
- **Site Identity & SEO:** Manage your site's name, logo, favicon, and SEO tags from a central place.
- **User & Group Management:** Super admins can manage users and groups via the API.
- **Frontend Ready:** Provides configuration endpoints for easy integration with a frontend dashboard.
- **Customizable:** Easily extend and customize serializers, viewsets, and permissions.
- **Automatic Translations:** All text fields are available in English, German and French without manual setup.
- **UI Component Metadata:** Each API response includes suggested components for creating, editing and displaying fields, plus predefined choices for things like icons and categories to ensure a consistent look and feel.

## Quick Start

1. **Setup Environment**

   ```bash
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   # or
   venv\Scripts\activate  # Windows
   ```

2. **Install Dependencies**

   ```bash
   pip install -r requirements.txt
   ```

3. **Environment Variables**

   Create a `.env` file from the example:

   ```bash
   cp .env.example .env
   ```

   Then, edit the `.env` file with your settings. See the `.env.example` file for detailed explanations of each variable. This now includes optional configuration for Cloudflare R2 storage.

4. **Database Setup**

   ```bash
   python manage.py migrate
   python manage.py createsuperuser
   ```

5. **Run Development Server**

   ```bash
   python manage.py runserver
   ```

6. **(Optional) Create Dummy Data**

   To populate the database with some sample data for testing, you can run the following command:

   ```bash
   python manage.py create_dummy_todos
   ```

## API Endpoints

- **Admin API Root**: `http://localhost:8000/api/admin/`
- **Dashboard Analytics**: `http://localhost:8000/api/admin/dashboard-stats/`
- **API for a model**: `http://localhost:8000/api/admin/models/<model-name>/`
- **Blog API**:
  - Posts: `http://localhost:8000/api/blog/posts/`
  - Categories: `http://localhost:8000/api/blog/categories/`
  - Tags: `http://localhost:8000/api/blog/tags/`
  - Search: `http://localhost:8000/api/blog/search/?q=<query>`
- **Traditional Admin**: `http://localhost:8000/admin/`
- **API Schema**:
  - `http://localhost:8000/api/schema/` (Download OpenAPI Schema)
  - `http://localhost:8000/api/schema/swagger-ui/` (Swagger UI)
  - `http://localhost:8000/api/schema/redoc/` (Redoc)

## Authentication Flow

This project uses JWT for authentication. Here is a summary of the authentication and user management endpoints.

### 1. Token Management

- **Get Tokens (Login Step 1)**: `POST /api/token/`

  - Provide `username` and `password`.
  - If 2FA is **disabled**, this returns `access` and `refresh` tokens directly.
  - If 2FA is **enabled**, it returns a temporary message: `{"detail": "OTP required.", "is_2fa_enabled": true}`.

- **Verify 2FA and Get Tokens (Login Step 2)**: `POST /api/auth/token/verify/`

  - If 2FA is enabled, use this endpoint.
  - Provide `username`, `password`, and the `otp` from an authenticator app.
  - On success, this returns the final `access` and `refresh` tokens.
  - _Note: If you receive an "Invalid OTP" error, please ensure your phone's clock is synchronized with an internet time server._

- **Refresh Token**: `POST /api/token/refresh/`
  - Provide the `refresh` token to get a new `access` token.

### 2. Password Reset

- **Request Reset**: `POST /api/auth/password_reset/`
  - Provide the user's `email` to receive a password reset link.
- **Confirm Reset**: `POST /api/auth/password_reset/confirm/`
  - Provide the `token` from the email and a `new_password`.

### 3. Account Management (Authenticated)

These endpoints require an active `access` token in the authorization header.

- **User Profile**:
  - `GET /api/auth/me/`: Retrieve the current user's profile (`username`, `email`, `first_name`, `last_name`).
  - `PATCH /api/auth/me/`: Update the current user's profile data.
- **Change Password**:
  - `POST /api/auth/me/change-password/`: Change the password by providing `old_password` and `new_password`.
- **Two-Factor Authentication (2FA)**:
  - **Enable (Step 1)**: `GET /api/auth/2fa/enable/` to get a secret key and a QR code for your authenticator app.
  - **Verify & Activate (Step 2)**: `POST /api/auth/2fa/verify/` with an `otp` to confirm the setup and activate 2FA on your account.
  - **Disable**: `POST /api/auth/2fa/disable/` with your current `password` to deactivate 2FA.

## Field Metadata and UI Components

Each model endpoint returns metadata describing its fields. This includes a
suggested `ui_component` for rendering forms or detail pages. The same
component type can be used when creating, editing or simply displaying data.
Translation fields are automatically added for every text field so your frontend
can present forms in English, German and French without extra setup.

To provide more specific control over the UI components, you can define a `field_metadata` dictionary within your `ModelAdmin`'s `Meta` class. This allows you to override the default component for any field. For example, to specify that a `content` field should use a Markdown editor:

```python
# in your_app/admin.py

@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    # ... other admin settings

    class Meta:
        frontend_config = {
            'icon': 'file-text',
            'category': 'Blog',
            'include_in_dashboard': True,
        }
        field_metadata = {
            'content': {'ui_component': 'markdown_editor'},
            'excerpt': {'ui_component': 'textarea'},
        }
```

This gives you fine-grained control over the frontend rendering hints provided by the API.

The main admin endpoint (`/api/admin/`) also provides a `frontend_options` object
that contains lists of predefined choices, such as available model
categories and a comprehensive icon set. This allows the frontend to build UIs
with consistent dropdowns and selection tools.

**For a detailed guide on how this system works, please see the [API Metadata Guide](./API_METADATA_GUIDE.md).**

## File Storage

This project supports both local file storage and Cloudflare R2 for media uploads.
By default, it uses the local filesystem. To use Cloudflare R2, you must provide
the appropriate `AWS_*` environment variables as detailed in the `.env.example` file.
When configured, all file uploads (like logos, user attachments, etc.) will be
sent to your R2 bucket.

## Project Structure

- `admin_api/` - The core app for the auto-generated admin API.
- `config/` - Django settings, main URL configuration, and WSGI entry point.
- `apps/` - Your project's applications (e.g., `core`, `blog`, `site_config`, `site_identity`).

---

## Guide d'utilisation pour tous (m√™me ma grand-m√®re) üëµ

Cette section est en fran√ßais pour vous montrer √† quel point ce projet est amical.

### Partie 1 : Installer le projet sur votre ordinateur

Imaginez que votre ordinateur poss√®de une fen√™tre de discussion magique (nous l'appelons un "terminal") o√π vous pouvez lui donner des instructions directes. C'est ce que nous allons utiliser.

1.  **Cr√©er un bac √† sable pour notre projet**
    Nous allons d'abord cr√©er un petit espace priv√© sur votre ordinateur, juste pour notre projet. C'est comme un bac √† sable, pour que nos jouets ne se m√©langent pas avec les autres.

    ```bash
    python -m venv env
    ```

    Puis, on dit √† l'ordinateur de "rentrer" dans ce bac √† sable pour commencer √† jouer.

    ```bash
    # Sur Windows
    env\\Scripts\\activate
    # Sur Mac ou Linux
    source env/bin/activate
    ```

2.  **Donner la liste de courses au projet**
    Notre projet a besoin de quelques "ingr√©dients" ou "outils" pour fonctionner. Nous lui donnons une liste de courses, et il va tout chercher et installer tout seul.

    ```bash
    pip install -r requirements.txt
    ```

3.  **Pr√©parer les fondations**
    Maintenant que nous avons les outils, nous devons construire la "m√©moire" du projet (sa base de donn√©es). C'est comme monter une √©tag√®re ou un classeur pour pouvoir ranger toutes les informations.

    ```bash
    python manage.py migrate
    ```

4.  **Cr√©er votre cl√© de "Super-Admin"**
    Vous √™tes le chef de ce projet ! Nous allons donc vous cr√©er une cl√© secr√®te (un nom d'utilisateur et un mot de passe) qui vous donnera acc√®s √† tout.

    ```bash
    python manage.py createsuperuser
    ```

5.  **Lancer la machine !**
    Et voil√† ! Il ne reste plus qu'√† d√©marrer le moteur.
    ```bash
    python manage.py runserver
    ```
    Votre projet est maintenant en ligne et accessible depuis votre navigateur √† l'adresse `http://127.0.0.1:8000/`.

### Partie 2 : Cr√©er une interface pour contr√¥ler le projet

Maintenant que le projet fonctionne, imaginez-le comme une cuisine magique pr√™te √† pr√©parer n'importe quel "plat de donn√©es". Votre interface (le "frontend") sera la salle du restaurant, o√π vous prendrez les commandes et afficherez les plats.

**Comment conna√Ætre le menu ?**

La cuisine a un "directeur" tr√®s intelligent. Vous n'avez pas besoin de deviner le menu, il vous suffit de lui demander !

1.  **Demander le Menu Principal**
    Envoyez une requ√™te √† l'endpoint `http://localhost:8000/api/admin/`. Le directeur vous donnera la liste de _tous les types de plats_ que la cuisine peut pr√©parer (par exemple : "Utilisateurs", "Articles de blog", "Cat√©gories").
    Pour chaque plat, il vous donnera aussi son **adresse exacte** (la cl√© `api_url`). C'est comme un menu qui vous dit : "Pour la soupe, allez au comptoir N¬∞1".
    En plus, le directeur vous donnera une liste de "d√©corations" pr√©d√©finies (la cl√© `frontend_options`). Cela inclut une liste d'ic√¥nes et de cat√©gories que vous pouvez utiliser dans votre interface pour que tout soit joli et coh√©rent.

2.  **Demander la Recette de Chaque Plat**
    Une fois que vous savez que vous voulez un "Article de blog", comment savoir de quels ingr√©dients vous avez besoin pour en cr√©er un ?
    Il suffit de demander la recette ! Chaque plat a une adresse de "configuration" (`/config/`).
    Cette recette vous dit tout ce dont vous avez besoin pour chaque ingr√©dient (chaque "champ") :
    - **Le type d'ingr√©dient** : Est-ce un texte court, une longue histoire, une date, une image ?
    - **La bo√Æte √† utiliser** : La recette vous sugg√®re m√™me le type de "bo√Æte" ou de "composant" √† utiliser dans votre interface. C'est la cl√© `ui_component`. Elle vous dira d'utiliser un petit champ de texte, une grande zone de texte, un √©diteur de texte riche (Markdown), un calendrier, un bouton pour t√©l√©charger une image, etc. C'est comme un kit de peinture par num√©ros pour construire vos formulaires !
    - **Les traductions** : Pour chaque champ de texte, la cuisine a d√©j√† pr√©par√© des versions en fran√ßais, anglais et allemand. Votre interface peut donc facilement afficher des onglets pour chaque langue.

**Comment passer une commande ?**

Une fois que votre interface est construite avec les bons formulaires (gr√¢ce aux recettes !), vous pouvez commencer √† envoyer des commandes √† la cuisine.

- Pour **VOIR** tous les articles de blog : `GET` sur l'adresse `api_url` des articles.
- Pour **CR√âER** un nouvel article : `POST` sur la m√™me adresse, avec les donn√©es du formulaire.
- Pour **MODIFIER** un article existant : `PUT` ou `PATCH` sur l'adresse de cet article pr√©cis.

N'oubliez pas que pour entrer dans la cuisine, il faut montrer votre cl√© de "Super-Admin" (le token JWT) √† chaque demande. C'est notre syst√®me de s√©curit√© pour s'assurer que seul le chef peut donner des ordres !
